AJAXandAPIsExercise

A. Inside the “AJAXandAPIs” folder create a Folder called “AJAXandAPIsExercise”
B. Inside the “AJAXandAPIsExercise” folder create a index.html file
C. Inside the “AJAXandAPIsExercise” folder create a style.css file
D. Inside the “AJAXandAPIsExercise” folder create a app.js file
E. Inside the index.html file create the HTML boilerplate and set the title of the page to “AJAX/APIs Exercise”
F. Link the app.js and style.css files to the index.html file
G. Paste the following HTML into your index.html file after the opening body tag (NOTE: Link/Script to include Axios is included)
<h1>Question One</h1>
  <div id="first">
  </div>
  <h1>Question Two</h1>
  <div id="second">
  </div>
  <h1>Question Three</h1>
  <div id="third">
  </div>
  <h1>Question Four</h1>
  <div id="fourth">
  </div>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
H. Paste the following CSS into your empty style.css file
div {
  border: 5px solid black;
  padding: 2px;
}

I. Paste the following JS into your empty app.js file
// AJAX and APIs Exercise

// 1
const first = document.querySelector('#first');
const p1 = document.createElement('p');
const p2 = document.createElement('p');
first.append(p1, p2);
`{"id":18,"type":"programming","setup":"Why did the programmer quit his job?","punchline":"Because he didn't get arrays."}`;

// 2
const second = document.querySelector('#second');
const p3 = document.createElement('p');
const p4 = document.createElement('p');
second.append(p3, p4);

// 3
const third = document.querySelector('#third');
const p5 = document.createElement('p');
const p6 = document.createElement('p');
third.append(p5, p6);

// 4
const fourth = document.querySelector('#fourth');
const p7 = document.createElement('p');
fourth.append(p7);

J. Start your Live Server (NOTE: Must be in the index.html file to do this)
NOTE: Entering URL/Endpoints into Postman can be helpful in this exercise. Also, it is suggested to turn off “Auto Save” for this exercise so you do NOT cause all the requests to be made over and over as you add to the JavaScript file.
Open your app.js file and complete the following...

1a. Change the string of JSON into JavaScript (It will be a JS object) and set the new value to a const variable called jokeJS1 (HINT: Use JSON.parse())

1b. Access the value for the "setup" key in the jokeJS1 object and set it to the inner text for the p1 variable/element (If done correctly the setup for the joke should display on the webpage)

1c. Access the value for the "punchline" key in the jokeJS1 object and set it to the inner text for the p2 variable/element (If done correctly the punchline for the joke should display on the webpage)


Use the Friends API for questions 2 & 3 (Link below)…
https://friends-quotes-api.herokuapp.com/

2a. Use the "Returns a single random quote." endpoint/URL to GET a Random quote using axios

2b. Use .then to create a function that sets the value returned from the axios GET request to a const variable called friendsJS2 (NOTE: You will need to create a function with a parameter. The parameter will hold the "resolved" value returned from the axios GET request).

2c. Inside of the same function, access the value for the "character" key in the friendsJS2 object and set it to the inner text for the p3 variable/element. Also, access the value for the "quote" key in the friendsJS2 object and set it to the inner text for the p4 variable/element (If done correctly the character and quote for the quote should display on the webpage)

2d. Finally, use .catch to create a function that would display the "rejected" value/error returned from the axios GET request in the console (NOTE: You will need a console log for this. Also, you will need to create a function with a parameter. The parameter will hold the "rejected" value/error returned from the axios GET request).


3a. Use the "Returns a single random quote." endpoint/URL again to GET another Random Quote using axios
3b. Create a function that uses async/await called quoteFunc which sets the value returned from the axios GET request to a const variable called quoteJS3

3c. Inside of the same quoteFunc function, access the value for the "character" key in the quoteJS3 object and set it to the inner text for the p5 variable/element. Also, access the value for the "quote" key in the quoteJS3 object and set it to the inner text for the p6 variable/element (If done correctly the character and quote for the quote should display on the webpage)(NOTE: Don't forget the run the quoteFunc function)

3d. Finally, include try and catch inside the quoteFunc function. For the catch, just have the "rejected" value/error returned from the axios GET request display in the console (NOTE: You will need a console log for this. Also, you will need to create a parameter for the catch. The parameter will hold the "rejected" value/error returned from the axios GET request).


Use the TVMazeAPI for question 4 (Link below)…
https://www.tvmaze.com/api

4a. Using Axios, Async/await, and the "Episode by Number" endpoint/URL display the name of the final episode in season two of "The Mandalorian" TV show as the inner text for the p7 variable/element. Also, use tvMazeFunc for the name of the async function you create. If done correctly the name of the episode should display on the webpage. (NOTE: Don't forget to run the tvMazeFunc function)(Hint: id is 38963).

4b. Finally, include try and catch inside the tvMazeFunc function. For the catch, just have the "rejected" value/error returned from the axios GET request display in the console (NOTE: You will need a console log for this. Also, you will need to create a parameter for the catch. The parameter will hold the "rejected" value/error returned from the axios GET request).


BONUS
5. Use the Poke API as well as Axios (https://pokeapi.co/) to display an image of Pikachu below the fourth div on the webpage (NOTE: You can use .then or Async Await to complete this question it is up to you)


6. Use the OMDb API as well as Axios (http://www.omdbapi.com/) to display a movie poster of your choice next to the image of Pikachu using the t parameter endpoint (NOTE: Technically it is a query string, but they call it a parameter on the documentation. Also, you will need to create/request a FREE API key at http://www.omdbapi.com/apikey.aspx to complete this. Finally, you can use .then or Async Await to complete this question it is up to you.)


When finished, create a repository in the “AJAXandAPIsExercise” Folder as well as on GitHub. Add and commit everything in the AJAXandAPIsExercise folder and push it up to your GitHub repository. Then paste the link to your GitHub repository page in the form.
      https://forms.gle/reYXZVGmvnfzkTPt5